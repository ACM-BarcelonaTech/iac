openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: The main Node.js pipeline API.
  license:
    name: MIT
  contact:
    name: Marcell Pek
    email: marcell@biomage.net
  termsOfService: 'https://opensource.org/licenses/MIT'
servers:
  - url: /v1
tags:
  - name: experiments
    description: Manage your experiments and experiment details.
  - name: heartbeat
    description: API health checks.
  - name: work
    description: Submitting and receiving work.
paths:
  /health:
    get:
      tags:
        - heartbeat
      summary: API health check
      operationId: checkHealth
      x-eov-operation-id: 'health#check'
      x-eov-operation-handler: routes/health
      responses:
        '200':
          description: API is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    pattern: up
                  env:
                    type: string
                    enum:
                      - development
                      - test
                      - staging
                      - production
      description: Returns a status on the health of the API.
  /workResults:
    post:
      operationId: receiveWork
      x-eov-operation-id: 'work#response'
      x-eov-operation-handler: routes/work
      requestBody:
        description: The data sent by AWS SNS.
        required: true
        content:
          text/plain:
            schema:
              type: string
            examples: {}
          application/json:
            schema:
              type: object
              properties: {}
            examples: {}
      responses:
        '200':
          description: 'A JSON-parseable was received by the server, *irrespective of whether it was correct/acceptable or not*.'
          content:
            text/plain:
              schema:
                type: string
                pattern: ok
        '500':
          description: The data sent by the server could not be parsed as JSON.
          content:
            text/plain:
              schema:
                type: string
                pattern: nok
      description: |-
        Results from work performed by workers are relayed to the API through this endpoint.

        Note that this endpoint is only exposed to AWS SNS, and since it has a specific communication protocol with limited feedback, the schema defined here is designed to be liberally enforceable. This endpoint is also used by SNS to handle subscribe/unsubscribe events.

        The actual JSON passed by SNS is found in the `WorkResponse` model, which is to be validated by the API.
      summary: Retrieve results from worker
      tags:
        - work
    parameters: []
  '/experiments/{experimentId}':
    get:
      tags:
        - experiments
      summary: Look up experiment by ID
      description: Returns the main details of the experiment.
      operationId: getExperimentById
      x-eov-operation-id: 'experiment#findByID'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
              examples:
                example-1: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Experiment not found
    parameters:
      - schema:
          type: string
        name: experimentId
        in: path
        required: true
        description: ID of the experiment to find.
  /experiments/generate:
    post:
      tags:
        - experiments
      summary: Generate mock data
      operationId: generateExperimentMockData
      x-eov-operation-id: 'experiment#generateMock'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
      description: Generates mock data into the pipeline DynamoDB database.
  '/experiments/{experimentId}/cellSets':
    get:
      tags:
        - experiments
      summary: Retrieve cell sets
      description: Returns a hirearchical view of cell sets in the experiment.
      operationId: getExperimentCellSetsById
      x-eov-operation-id: 'experiment#getCellSets'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  cell_sets:
                    type: array
                    items:
                      $ref: '#/components/schemas/CellSets'
        '400':
          description: Invalid ID supplied.
        '404':
          description: Experiment not found
    parameters:
      - name: experimentId
        in: path
        description: ID of experiment to find cell sets of.
        required: true
        schema:
          type: string
components:
  securitySchemes: {}
  schemas:
    Experiment:
      type: object
      required:
        - experiment_id
        - experiment_name
      properties:
        experiment_id:
          type: string
        experiment_name:
          type: string
    ApiResponse:
      type: object
      required:
        - code
        - type
        - message
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    CellSets:
      type: object
      properties:
        key:
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
        name:
          type: string
        rootNode:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/CellSets'
      required:
        - key
        - name
    WorkResponse:
      title: WorkResponse
      type: object
      description: This is the format the workers communicate the results of the work they completed back to the API. The API is then responsible for transforming this data and returning it back to the clients.
      properties:
        socketId:
          type: string
          description: The connection ID of the socket the client is using. This is where the response will be sent back.
        results:
          type: array
          description: The results of the work
          items:
            type: object
            description: The results of the work
            properties:
              content-type:
                type: string
                example: application/json
                description: The MIME type of the work completed.
              type:
                type: string
                description: The type of content found in the `body`.
                enum:
                  - inline
                  - s3-path
              body:
                type: string
                description: The work result in the format specified by `content-type` and `type`.
              content-encoding:
                type: string
                default: utf-8
                description: The encoding used with the binary value received.
            required:
              - content-type
              - type
              - body
        timeout:
          type: string
          format: date-time
          description: 'The timeout value for this work specified by the UI. While processing work, all work items whose timeout field is past the current time will be discarded along the work processing chain.'
        uuid:
          type: string
          format: uuid
          description: The UUID of the work submitted by the UI.
      required:
        - socketId
        - results
        - timeout
        - uuid
    ApiError:
      title: ApiError
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
      required:
        - message
        - errors
    WorkRequest:
      title: WorkRequest
      type: object
      description: This is the schema for the event emitted by the UI when certain work is requested from the API/workers.
      properties:
        uuid:
          type: string
          format: uuid
          description: A UUID generated by the client submitting the work. Will be used to map `WorkResponse` objects to the request submitted.
        socketId:
          type: string
          description: The connection ID of the socket the client is using. The API will send the result back to the ID specified in this parameter.
        timeout:
          type: string
          format: date-time
          description: 'The timeout parameter set by the client. While processing work, all work items whose timeout field is past the current time will be discarded along the work processing chain.'
        body:
          $ref: '#/components/schemas/WorkSchemaGetEmbedding'
        experimentId:
          type: string
          description: The ID of the experiment for which this work was created.
      required:
        - uuid
        - socketId
        - timeout
        - experimentId
    WorkSchemaGetEmbedding:
      title: WorkSchemaGetEmbedding
      type: object
      description: ''
      properties:
        name:
          type: string
          example: GetEmbedding
          description: The name of this work -- must be `GetEmbedding`.
        type:
          type: string
          enum:
            - pca
            - tsne
            - umap
          description: The type of embedding to compute.
        filter:
          type: string
          description: 'The cell set whose embedding will be computed. If left undefined, the embedding will be computed on all cells.'
      required:
        - name
        - type
