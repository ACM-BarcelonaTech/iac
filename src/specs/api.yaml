openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: The main Node.js pipeline API.
  license:
    name: MIT
  contact:
    name: Marcell Pek
    email: marcell@biomage.net
  termsOfService: 'https://opensource.org/licenses/MIT'
servers:
  - url: /v1
tags:
  - name: experiments
    description: Manage your experiments and experiment details.
paths:
  /health:
    get:
      tags:
        - heartbeat
      summary: API health check
      operationId: checkHealth
      x-eov-operation-id: 'health#check'
      x-eov-operation-handler: routes/health
      responses:
        '200':
          description: API is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    pattern: up
                  env:
                    type: string
                    enum:
                      - development
                      - test
                      - staging
                      - production
      description: Returns a status on the health of the API.
  /work:
    post:
      operationId: submitWork
      x-eov-operation-id: 'work#submit'
      x-eov-operation-handler: routes/work
      requestBody:
        description: work to submit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file_path:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
              examples: {}
  /workResults:
    post:
      operationId: receiveWork
      x-eov-operation-id: 'work#response'
      x-eov-operation-handler: routes/work
      requestBody:
        description: The data sent by AWS SNS.
        required: true
        content:
          text/plain:
            schema:
              type: string
            examples: {}
          application/json:
            schema:
              type: object
              properties: {}
            examples: {}
      responses:
        '200':
          description: 'A JSON-parseable was received by the server, *irrespective of whether it was correct/acceptable or not*.'
          content:
            text/plain:
              schema:
                type: string
                pattern: ok
        '500':
          description: The data sent by the server could not be parsed as JSON.
          content:
            text/plain:
              schema:
                type: string
                pattern: nok
      description: |-
        Results from work performed by workers are relayed to the API through this endpoint.

        Note that this endpoint is only exposed to AWS SNS, and since it has a specific communication protocol with limited feedback, the schema defined here is designed to be liberally enforceable. This endpoint is also used by SNS to handle subscribe/unsubscribe events.

        The actual JSON for the experiments is found in the `WorkResponse` model, which is to be validated by the API.
      summary: Retrieve results from worker
    parameters: []
  '/experiments/{experimentId}':
    get:
      tags:
        - experiments
      summary: Look up experiment by ID
      description: Returns the main details of the experiment.
      operationId: getExperimentById
      x-eov-operation-id: 'experiment#findByID'
      x-eov-operation-handler: routes/experiment
      parameters:
        - name: experimentId
          in: path
          description: ID of experiment to find.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
              examples:
                example-1: {}
            application/xml:
              schema:
                type: object
                properties:
                  '':
                    type: string
            multipart/form-data:
              schema:
                type: object
                properties: {}
            text/html:
              schema:
                type: object
                properties: {}
            text/plain:
              schema:
                type: object
                properties: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Experiment not found
  /experiments/generate:
    post:
      tags:
        - experiments
      summary: Generate mock data
      operationId: generateExperimentMockData
      x-eov-operation-id: 'experiment#generateMock'
      x-eov-operation-handler: routes/experiment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: {}
      description: Generates mock data into the pipeline DynamoDB database.
  '/experiments/{experimentId}/cell-sets':
    get:
      tags:
        - experiments
      summary: Retrieve cell sets
      description: Returns a hirearchical view of cell sets in the experiment.
      operationId: getExperimentCellSetsById
      x-eov-operation-id: 'experiment#getCellSets'
      x-eov-operation-handler: routes/experiment
      parameters:
        - name: experimentId
          in: path
          description: ID of experiment to find.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  cell_sets:
                    type: array
                    items:
                      $ref: '#/components/schemas/CellSets'
        '400':
          description: Invalid ID supplied.
        '404':
          description: Experiment not found
components:
  securitySchemes: {}
  schemas:
    Experiment:
      type: object
      required:
        - experiment_id
        - experiment_name
      properties:
        experiment_id:
          type: string
        experiment_name:
          type: string
    ApiResponse:
      type: object
      required:
        - code
        - type
        - message
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    CellSets:
      type: object
      properties:
        key:
          type: integer
          format: int32
        name:
          type: string
        rootNode:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/CellSets'
      required:
        - key
        - name
    WorkResponse:
      title: WorkResponse
      type: object
      description: This is the format the workers communicate the results of the work they completed back to the API. The API is then responsible for transforming this data and returning it back to the clients.
      properties:
        socketId:
          type: string
          description: The ID of the socket where the response is expected by the UI.
        results:
          type: array
          description: The results of the work
          items:
            type: object
            description: The results of the work
            properties:
              content-type:
                type: string
                example: application/json
                description: The MIME type of the work completed.
              type:
                type: string
                description: The type of content found in the `body`.
                enum:
                  - inline
                  - s3-path
              body:
                type: string
                description: The work result in the format specified by `content-type` and `type`.
            required:
              - content-type
              - type
              - body
        timeout:
          type: string
          format: date-time
          description: The timeout value for this work specified by the UI.
        uuid:
          type: string
          format: uuid
          description: The UUID of the work submitted by the UI.
      required:
        - socketId
        - results
        - timeout
        - uuid
    ApiError:
      title: ApiError
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
      required:
        - message
        - errors
