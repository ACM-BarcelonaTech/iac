name: Deploy changed CloudFormation templates
on:
  push:
    branches:
      - master
    paths:
      - 'cf/**.yaml'
      - 'cf/**.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'cf/**.yaml'
      - 'cf/**.yml'

jobs:
  get-modified-templates:
    name: Fetch paths to modified CloudFormation templates
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.check-number-of-cf-files.outputs.files }}
      num-files: ${{ steps.check-number-of-cf-files.outputs.num-files }}
    steps:
      - id: get-changed-files
        name: Get changed files
        uses: lots0logs/gh-action-get-changed-files@2.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - id: check-number-of-cf-files
        name: Check CloudFormation templates
        run: |-
          # Merge all modified and renamed files into one JSON array
          #jq -s add ${HOME}/files_added.json ${HOME}/files_modified.json ${HOME}/files_renamed.json > ${HOME}/files_to_check.json

          cat ${HOME}/files.json
          echo

          # Select those that are CF templates (path starts with `cf/`)
          jq '[.[] | select(match("^cf/"))]' ${HOME}/files.json > ${HOME}/cf_files.json

          # Set as output the minified JSON.
          echo "::set-output name=files::$(jq -c . < ${HOME}/cf_files.json)"
          echo "$(jq -c . < ${HOME}/cf_files.json)"
          echo "::set-output name=num-files::$(jq '. | length' ${HOME}/cf_files.json)"

  deploy-templates:
    name: Deploy changed CloudFormation template
    runs-on: ubuntu-latest
    needs: get-modified-templates
    if: needs.get-modified-templates.outputs.num-files > 0
    strategy:
      matrix:
        environment: ['production']
        template: ${{fromJson(needs.get-modified-templates.outputs.files)}}
    env:
      CLUSTER_ENV: ${{ matrix.environment }}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # This is only necessary for IAM Service Account roles.
      - id: get-oidc
        if: ${{ contains(matrix.template, 'irsa-') }}
        name: Get OIDC provider information for IRSA role
        run: |-
          OIDC_PROVIDER=$(aws eks describe-cluster --name "biomage-$CLUSTER_ENV" --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///")
          echo "::set-output name=oidc-provider::$OIDC_PROVIDER"

      - id: set-name
        name: Set name of the CloudFormation stack
        run: |-
          BASE_NAME=biomage-$(basename $FILE_NAME | sed "s/\..*//")-$CLUSTER_ENV
          echo "::set-output name=stack-name::$BASE_NAME"
        env:
          FILE_NAME: ${{ matrix.template }}

      # aws-actions/aws-cloudformation-github-deploy@v1 takes
      # 0/1 instead of true/false so we have to cast between them.
      # there is no builtin for this in GitLab so this step serves this
      # purpose.
      - id: check-lint
        name: Check if deployment or validation is required
        run: |-
          if ["${{ github.ref == 'master' }}" -eq "true"]
          then
            echo "We are pushing to master, deploying instead of validating."
            echo "::set-output name=no-execute-changeset::0"
          else
            echo "We are not pushing to master (probably a PR), validating instead of deploying."
            echo "::set-output name=no-execute-changeset::1"
          fi
            
      # Only generate the changeset (validate) the template when not
      # the commit is not a push to master.
      - id: deploy-template
        name: Deploy/validate CloudFormation template
        if: ${{ !contains(matrix.template, 'irsa-') }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          parameter-overrides: "Environment=${{ matrix.environment }}"
          name: ${{ steps.set-name.outputs.stack-name }}
          template: ${{ matrix.template }}
          no-fail-on-empty-changeset: "1"
          asd: fgh
          no-execute-changeset: "${{ steps.check-lint.no-execute-changeset }}"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

      # Only generate the changeset (validate) the template when not
      # the commit is not a push to master.
      - id: deploy-irsa-template
        if: ${{ contains(matrix.template, 'irsa-') }}
        name: Deploy/validate IRSA CloudFormation template
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          parameter-overrides: "Environment=${{ matrix.environment }},OIDCProvider=${{ steps.get-oidc.outputs.oidc-provider }}"
          name: ${{ steps.set-name.outputs.stack-name }}
          template: ${{ matrix.template }}
          no-fail-on-empty-changeset: "1"
          no-execute-changeset: ${{ steps.check-lint.no-execute-changeset }}
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"
